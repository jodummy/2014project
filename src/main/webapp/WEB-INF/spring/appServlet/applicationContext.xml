<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- 3-1 context에서 사용하는 Model 객체를 등록 -->
	<!-- 1. 값을 가지고 있는 properties를 spring bean에 등록 -->
	<!-- 2. 등록된 properties를 이용해서 DataSource -->
	<!-- 3. DataSource를 이용해서 필요 library 설정을 한다 (mybatis>SqlSessionFactoryBean 객체)  -->
	<!-- 4. spring bean에 등록된 SqlSessionFactoryBean를 spring이 사용할 수 있는 Template에 등록(SqlSessionFactoryBean) -->


	<!-- properties 등록 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/db.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- dataSource 등록 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="defaultAutoCommit" value="true" />
	</bean>
	
	<!-- mybatis객체인 SqlSessionFactoryBean 객체를 spring에 등록 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/spring/sqls/SqlMapConfig.xml" />
	</bean>
	
	<!-- 생성된 SqlSessionFactoryBean 객체를 Spring이 사용할 수 있는 Template에 등록 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSession" />
	</bean>

	<!-- Transaction 사용을 위해 spring에 등록 -->
	<!-- @Transactional 을 사용한 transaction 처리 -->
	<bean
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		id="transactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- AOP를 이용하여 자동으로 Transaction이(rollback)실행 되도록 함 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* ya.rain.bow.model.service.*Service*.*(..))" />
	</aop:config>


	<!-- 메일보내기 -->
   <bean id="mailSender" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
      <property name="username" value="아이디@gmail.com" />
      <property name="password" value="비밀번호" />
      
      <property name="javaMailProperties">
         <props>
               <prop key="mail.transport.protocol">smtp</prop>
               <prop key="mail.smtp.auth">true</prop>
               <prop key="mail.smtp.starttls.enable">true</prop>
               <prop key="mail.debug">true</prop>
         </props>
      </property>
   </bean>


</beans>
